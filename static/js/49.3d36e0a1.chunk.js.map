{"version":3,"file":"static/js/49.3d36e0a1.chunk.js","mappings":"2MAEaA,E,QAAsBC,EAAAA,IAAH,mG,qEC4JhC,EAtJqB,WAAO,IAAD,IACzB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BF,EAAAA,EAAAA,WAAS,GAArC,eAAOG,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAGFE,EAAQ,qBADGC,EAAAA,EAAAA,MACSC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,KAEzCC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAaP,GAASQ,MAAK,SAAAC,GACzBZ,EAASY,EAAOC,MAChBX,GAAU,EACX,GACF,GAAE,CAACC,IAEJ,IAAQW,EACNf,EADMe,YAAaC,EACnBhB,EADmBgB,aAAcC,EACjCjB,EADiCiB,MAAOC,EACxClB,EADwCkB,WAAYC,EACpDnB,EADoDmB,SAAUC,EAC9DpB,EAD8DoB,OAG1DC,EAAQ,yCAAqCN,GAE7CO,EAAc,IAAIC,KAAKP,GAAcQ,cAC3C,OACE,2BACGtB,GACC,iCACE,UAAC,KAAD,CAAMuB,GAAInB,EAAV,WACE,SAAC,MAAD,CAAaoB,KAAK,OADpB,WAIA,UAAC7B,EAAD,YACE,gBAAK8B,IAAKN,EAAUO,MAAM,MAAMC,IAAKZ,KACrC,4BACE,0BACGA,EADH,KACYK,EADZ,QAGA,yCAAiBQ,KAAKC,MAAMb,GAA5B,QACA,sCACA,uBAAIC,KACJ,mCACCC,EAAOY,KAAI,SAAAC,GACV,OAAO,uBAAmBA,EAAMC,MAAjBD,EAAME,GACtB,WAGL,mBACA,mDACA,2BACE,yBACE,SAAC,KAAD,CAAMV,GAAG,OAAOjB,MAAO,CAAEC,KAAMH,GAA/B,qBAIF,yBACE,SAAC,KAAD,CAAMmB,GAAG,UAAUjB,MAAO,CAAEC,KAAMH,GAAlC,2BAKJ,sBAGF,SAAC,KAAD,CACE8B,SAAS,EACTC,OAAO,KACPT,MAAM,KACNU,UAAU,iBACVC,aAAc,CAAC,EACfC,aAAa,iBACbC,OAAQ,CAAC,MAAO,QAAS,OAAQ,SAAU,SAAU,aAGzD,SAAC,KAAD,MAGL,C,4MChFKC,EAAM,mCAEZC,IAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAiB,mCAAG,WAAMC,GAAN,uFACRF,IAAAA,IAAA,sCACUD,EADV,iBACsBG,IAFd,cACzBC,EADyB,yBAIxBA,EAAShC,MAJe,2CAAH,sDAOjBH,EAAY,mCAAG,WAAMwB,GAAN,uFACHQ,IAAAA,IAAA,iBACXR,EADW,oBACGO,IAFA,cACpBI,EADoB,yBAInBA,GAJmB,2CAAH,sDAOZC,EAAc,mCAAG,WAAOF,EAAMG,GAAb,uFACLL,IAAAA,IAAA,+BACGD,EADH,kBACgBM,EADhB,iBAC8BH,IAFzB,cACtBC,EADsB,yBAIrBA,EAAShC,MAJY,2CAAH,wDAOdmC,EAAe,mCAAG,WAAMd,GAAN,uFACNQ,IAAAA,IAAA,gBACZR,EADY,4BACUO,EADV,2BADM,cACvBI,EADuB,yBAItBA,EAAShC,KAAKoC,SAJQ,2CAAH,sDAOfC,EAAe,mCAAG,WAAMhB,GAAN,uFACNQ,IAAAA,IAAA,iBACXR,EADW,4BACWO,EADX,oBADM,cACvBI,EADuB,yBAItBA,EAAShC,KAAKsC,MAJQ,2CAAH,qD","sources":["components/MovieInfoItem/MovieInfoItem.styled.jsx","pages/MovieDetails.jsx","services/getMovies.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const MovieInfoItemStyled = styled.div`\n  display: flex;\n  gap: 10px;\n\n  & > div {\n    max-width: 400px;\n  }\n`;\n","import { MovieInfoItemStyled } from 'components/MovieInfoItem/MovieInfoItem.styled';\nimport { getMovieInfo } from '../services/getMovies';\nimport { useState, useEffect } from 'react';\nimport { useParams, Outlet, useLocation } from 'react-router-dom';\nimport { Vortex } from 'react-loader-spinner';\nimport { Link } from 'react-router-dom';\nimport { IoArrowBack } from 'react-icons/io5';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState([]);\n  const [isLoad, setIsLoad] = useState(false);\n  const { movieId } = useParams();\n\n  const location = useLocation();\n  const backLink = location.state?.from ?? '/';\n\n  useEffect(() => {\n    getMovieInfo(movieId).then(result => {\n      setMovie(result.data);\n      setIsLoad(true);\n    });\n  }, [movieId]);\n\n  const { poster_path, release_date, title, popularity, overview, genres } =\n    movie;\n\n  const imageURL = `https://image.tmdb.org/t/p/w500${poster_path}`;\n\n  const releaseYear = new Date(release_date).getFullYear();\n  return (\n    <div>\n      {isLoad ? (\n        <>\n          <Link to={backLink}>\n            <IoArrowBack size=\"10\" />\n            Back\n          </Link>\n          <MovieInfoItemStyled>\n            <img src={imageURL} width=\"300\" alt={title} />\n            <div>\n              <h1>\n                {title} ({releaseYear})\n              </h1>\n              <h2>Popularity: {Math.round(popularity)} </h2>\n              <h2>Overview</h2>\n              <p>{overview}</p>\n              <h2>Genres</h2>\n              {genres.map(genre => {\n                return <p key={genre.id}>{genre.name}</p>;\n              })}\n            </div>\n          </MovieInfoItemStyled>\n          <hr />\n          <p>Additional information</p>\n          <ul>\n            <li>\n              <Link to=\"cast\" state={{ from: backLink }}>\n                Cast\n              </Link>\n            </li>\n            <li>\n              <Link to=\"reviews\" state={{ from: backLink }}>\n                Reviews\n              </Link>\n            </li>\n          </ul>\n          <hr />\n        </>\n      ) : (\n        <Vortex\n          visible={true}\n          height=\"80\"\n          width=\"80\"\n          ariaLabel=\"vortex-loading\"\n          wrapperStyle={{}}\n          wrapperClass=\"vortex-wrapper\"\n          colors={['red', 'green', 'blue', 'yellow', 'orange', 'purple']}\n        />\n      )}\n      <Outlet />\n    </div>\n  );\n};\n\n// const MovieDetails = () => {\n//   const [movie, setMovie] = useState({});\n//   const [isLoad, setIsLoad] = useState(false);\n//   const { movieId } = useParams();\n\n//   const location = useLocation();\n//   const backLink = location.state?.from ?? '/';\n\n//   useEffect(() => {\n//     getMovieInfo(movieId).then(result => {\n//       setMovie(result.data);\n//       setIsLoad(true);\n//     });\n//   }, [movieId]);\n\n//   const { title, poster_path, release_date, popularity, overview, genres } =\n//     movie;\n//   const imageURL = `https://image.tmdb.org/t/p/w500${poster_path}`;\n//   const releaseYear = new Date(release_date).getFullYear();\n//   return (\n//     <div>\n//       {isLoad ? (\n//         <>\n//           <Link to={backLink}>\n//             <IoArrowBack size=\"10\" />\n//             Back\n//           </Link>\n//           <MovieInfoItemStyled>\n//             <img src={imageURL} width=\"300\" alt={title} />\n//             <div>\n//               <h1>\n//                 {title} ({releaseYear})\n//               </h1>\n//               <h2>Popularity: {Math.round(popularity)} </h2>\n//               <h2>Overview</h2>\n//               <p>{overview}</p>\n//               <h2>Genres</h2>\n//               {genres.map(genre => {\n//                 return <p key={genre.id}>{genre.name}</p>;\n//               })}\n//             </div>\n//           </MovieInfoItemStyled>\n//           <hr />\n//           <p>Additional information</p>\n//           <ul>\n//             <li>\n//               <Link to=\"cast\" state={{ from: backLink }}>\n//                 Cast\n//               </Link>\n//             </li>\n//             <li>\n//               <Link to=\"reviews\" state={{ from: backLink }}>\n//                 Reviews\n//               </Link>\n//             </li>\n//           </ul>\n//           <hr />\n//         </>\n//       ) : (\n//         <Vortex\n//           visible={true}\n//           height=\"80\"\n//           width=\"80\"\n//           ariaLabel=\"vortex-loading\"\n//           wrapperStyle={{}}\n//           wrapperClass=\"vortex-wrapper\"\n//           colors={['red', 'green', 'blue', 'yellow', 'orange', 'purple']}\n//         />\n//       )}\n//       <Outlet />\n//     </div>\n//   );\n// };\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst KEY = '0888b454b4f7be0ebcd69ceb372ced29';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendsOfMovies = async page => {\n  const response = await axios.get(\n    `/trending/movie/day?api_key=${KEY}&page=${page}`\n  );\n  return response.data;\n};\n\nexport const getMovieInfo = async id => {\n  const response = await axios.get(\n    `/movie/${id}?api_key=${KEY}`\n  );\n  return response;\n};\n\nexport const getSearchQuery = async (page, query) => {\n  const response = await axios.get(\n    `search/movie?api_key=${KEY}&query=${query}&page=${page}`\n  );\n  return response.data;\n}\n\nexport const getMovieReviews = async id => {\n  const response = await axios.get(\n    `movie/${id}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n\nexport const getMovieCredits = async id => {\n  const response = await axios.get(\n    `/movie/${id}/credits?api_key=${KEY}&language=en-US`\n  );\n  return response.data.cast;\n};"],"names":["MovieInfoItemStyled","styled","useState","movie","setMovie","isLoad","setIsLoad","movieId","useParams","backLink","useLocation","state","from","useEffect","getMovieInfo","then","result","data","poster_path","release_date","title","popularity","overview","genres","imageURL","releaseYear","Date","getFullYear","to","size","src","width","alt","Math","round","map","genre","name","id","visible","height","ariaLabel","wrapperStyle","wrapperClass","colors","KEY","axios","getTrendsOfMovies","page","response","getSearchQuery","query","getMovieReviews","results","getMovieCredits","cast"],"sourceRoot":""}